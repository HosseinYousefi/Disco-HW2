int: n;
array[1..n, 1..n] of float: c;
array[1..n, 1..n] of var 0..1: x;

constraint forall(i, j in 1..n) (x[i, j] = x[j, i]);

constraint forall(i in 1..n) (
    sum(j in 1..n where j != i) (x[i, j]) = 2
);

array[1..15] of set of 1..n: subtours = [
    {1, 6, 3, 48, 27, 7, 37, 13, 31, 24, 35, 25, 42, 28, 4, 47, 9, 5, 36, 14, 8, 20, 41, 12, 43, 19, 17, 45, 15, 16, 39, 51, 40, 44, 30, 22, 38, 21, 26, 2, 32, 23, 34},
    {10, 11, 29, 46},
    {18, 33, 49, 50},
    {1, 6, 3, 29, 11, 10, 46, 4, 47, 9, 5, 36, 14, 8, 20, 41, 19, 17, 45, 15, 16, 39, 51, 40, 50, 18, 33, 49, 32, 23, 34},
    {2, 21, 26},
    {7, 27, 48, 28, 42, 25, 35, 24, 31, 13, 37},
    {12, 38, 22, 44, 30, 43},
    {1, 6, 3, 29, 11, 10, 46, 28, 4, 47, 9, 5, 14, 36, 24, 31, 13, 37, 7, 27, 48, 34},
    {2, 26, 21, 38, 22, 44, 30, 43, 12, 19, 17, 45, 15, 16, 39, 51, 40, 50, 18, 33, 49, 23, 32},
    {8, 20, 41},
    {25, 35, 42},
    {1, 33, 49, 18, 50, 40, 51, 39, 16, 15, 45, 17, 19, 43, 12, 41, 20, 8, 14, 36, 24, 31, 13, 37, 7, 27, 48, 28, 42, 25, 35, 5, 9, 47, 4, 46, 10, 11, 29, 3, 6, 34},
    {2, 23, 32},
    {21, 26, 38},
    {22, 30, 44}
];

constraint forall(s in subtours) (
    sum(i, j in 1..n where (i in s) /\ not (j in s)) (x[i, j]) >= 1
);

var float: cost = sum(i, j in 1..n) (c[i, j] * x[i, j]) / 2;

solve minimize cost;

output ["\(n)\n"] ++ 
    [show(x[i, j]) ++
        if j = n then "\n" else " " endif
    | i, j in 1..n] 
    ++ ["cost: \(cost)"];
% output to be used in cycles.cpp